#!/usr/bin/env node

require('dotenv').config({
  path: `./env/${process.env.NODE_ENV || 'development'}.env`,
});

/**
 * Module dependencies.
 */

var app = require('./app/app.js');
var http = require('http');
const { HTTP_HOST, PORT } = process.env;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  require('./config/db_config');
  console.log(`HobbyApp service ${process.pid} listening on ${bind} in ${process.env.NODE_ENV} mode`)
}

process.on('uncaughtException', uncaughtException => {
  console.error(
    'Uncaught Exception at: %s - message: %s',
    uncaughtException.stack,
    uncaughtException.message
  );
});

process.on('unhandledRejection', reason => {
  console.error('Unhandled Rejection at: %s - message: %s', reason.stack, reason.message);
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, HTTP_HOST);
server.on('error', onError);
server.on('listening', onListening);
